// ==============================================
// PART 1: OPTICAL WATER DETECTION (JRC Dataset)
// ==============================================
var jrcDataset = ee.ImageCollection('JRC/GSW1_4/YearlyHistory')
                  .filterBounds(ee.Geometry.Point([36.43, -0.15]));

// ==============================================
// PART 2: SAR WATER DETECTION (Sentinel-1)
// ==============================================
var sarCollection = ee.ImageCollection('COPERNICUS/S1_GRD')
                   .filterBounds(ee.Geometry.Point([36.43, -0.15]))
                   .filter(ee.Filter.eq('instrumentMode', 'IW'))
                   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                   .map(function(image) {
                      return image.select(['VV']).copyProperties(image, ['system:time_start']);
                   });

function calculateSARWater(image) {
  var filtered = image.focal_mean(50, 'circle', 'meters'); // Reduce noise
  var water = filtered.lt(-16); // Water threshold
  return water.rename('water').set('system:time_start', image.get('system:time_start'));
}

var sarWater = sarCollection.map(calculateSARWater);

// ==============================================
// PART 3: HABITAT CLASSIFICATION
// ==============================================
var roi = ee.Geometry.Polygon([
  [[36.3537, 0.0118], [36.3537, -0.2299], [36.5123, -0.2299], [36.5123, 0.0118]]
]);

var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
          .filterBounds(roi)
          .filterDate('2021-01-01', '2021-12-31')
          .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
          .median();

var ndvi = s2.normalizedDifference(['B8', 'B4']).rename('NDVI');
var mndwi = s2.normalizedDifference(['B3', 'B11']).rename('MNDWI');
var ndbi = s2.normalizedDifference(['B11', 'B8']).rename('NDBI');

var habitatBands = s2.select(['B4', 'B3', 'B2'])
  .addBands(ndvi)
  .addBands(mndwi)
  .addBands(ndbi);

var training = habitatBands.sample({region: roi, scale: 10, numPixels: 5000});
var clusterer = ee.Clusterer.wekaKMeans(5).train(training);
var habitatMap = habitatBands.cluster(clusterer);

var classNames = ['Open Water', 'Wetlands', 'Grassland', 'Riparian Woodland', 'Built-up'];
var habitatPalette = ['#1E90FF', '#228B22', '#ADFF2F', '#8B4513', '#FF4500'];

// ==============================================
// VISUALIZATION & UI COMPONENTS
// ==============================================
var lakeOlBolosat = ee.Geometry.Rectangle([36.35, -0.25, 36.50, -0.05]);

var startYear = 2014, endYear = 2021, currentYear = startYear;
var timeSlider = ui.DateSlider({
  start: startYear + '-01-01', end: endYear + '-12-31', value: startYear + '-01-01',
  period: 365, style: {width: '300px'},
  onChange: function(dateRange) {
    currentYear = ee.Date(dateRange.start()).get('year').getInfo();
    updateMap(currentYear);
  }
});

var jrcVis = {min: 0, max: 3, palette: ['cccccc', 'ffffff', '99d9ea', '0000ff']};
var sarVis = {min: 0, max: 1, palette: ['000000', '0000ff']};

function updateMap(year) {
  Map.layers().reset();
  
  var jrcImg = jrcDataset.filter(ee.Filter.calendarRange(year, year, 'year')).first();
  if (jrcImg) Map.addLayer(jrcImg.clip(lakeOlBolosat), jrcVis, 'JRC Water ' + year);
  
  var sarImg = sarWater.filter(ee.Filter.calendarRange(year, year, 'year')).mean();
  if (sarImg) Map.addLayer(sarImg.clip(lakeOlBolosat), sarVis, 'SAR Water ' + year, false);
  
  if (jrcImg && sarImg) {
    var agreement = jrcImg.eq(3).and(sarImg.eq(1));
    Map.addLayer(agreement.clip(lakeOlBolosat), {palette: ['00ff00']}, 'Agreement', false);
  }

  var habitatLayer = Map.addLayer(habitatMap.clip(roi), {min: 0, max: 4, palette: habitatPalette}, 'Habitat Map', false);
  return habitatLayer;
}

// ✅ Function to check if Habitat Map is active
function isHabitatMapActive() {
  var layers = Map.layers();
  for (var i = 0; i < layers.length(); i++) {
    if (layers.get(i).getName() === 'Habitat Map' && layers.get(i).getShown()) {
      return true;
    }
  }
  return false;
}

// ✅ Updated Autoplay Function with Habitat Check & Auto-Zoom to ROI
function autoplay() {
  if (!isHabitatMapActive()) { 
    timeSlider.setValue(ee.Date.fromYMD(currentYear, 1, 1));
    currentYear++;
    if (currentYear > endYear) {
      currentYear = startYear;
      Map.centerObject(roi, 12); // Auto-zoom back to ROI after loop
    }
  }
}

ui.util.setInterval(autoplay, 10000);

// ==============================================
// LEGEND (WATER + HABITAT CLASSIFICATION)
// ==============================================
var legend = ui.Panel({ style: {position: 'bottom-right', padding: '8px'} });
legend.add(ui.Label('Water & Habitat Classification', {fontWeight: 'bold'}));

var legendItems = [
  {color: 'cccccc', label: 'No Data'},
  {color: 'ffffff', label: 'Not Water'},
  {color: '99d9ea', label: 'Seasonal Water'},
  {color: '0000ff', label: 'Permanent Water'},
  {color: '00ff00', label: 'Agreement (JRC & SAR)'}
];

classNames.forEach(function(name, i) {
  legendItems.push({ color: habitatPalette[i], label: name });
});

legendItems.forEach(function(item) {
  var colorBox = ui.Label({style: {backgroundColor: item.color, padding: '8px', width: '20px', height: '20px'}});
  var description = ui.Label({value: item.label, style: {padding: '8px'}});
  legend.add(ui.Panel({widgets: [colorBox, description], layout: ui.Panel.Layout.Flow('horizontal')}));
});

Map.add(legend);

// ==============================================
// USER INTERFACE & ROI ZOOM
// ==============================================
var titleLabel = ui.Label({
  value: "Lake Ol' Bolossat Water & Habitat Monitoring",
  style: {fontWeight: 'bold', fontSize: '18px', color: '#1d3c34'}
});

var panel = ui.Panel({
  widgets: [titleLabel, ui.Label('Select year and toggle layers:'), timeSlider],
  style: {position: 'bottom-left', padding: '8px'}
});

Map.add(panel);
updateMap(startYear);

// ✅ Zoom to ROI Button
var zoomButton = ui.Button({
  label: 'Zoom to ROI',
  onClick: function() {
    Map.centerObject(roi, 12);
  }
});
Map.add(zoomButton);
