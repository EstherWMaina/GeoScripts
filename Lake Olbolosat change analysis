// ==============================================
// PART 1: OPTICAL WATER DETECTION (JRC Dataset)
// ==============================================
var jrcDataset = ee.ImageCollection('JRC/GSW1_4/YearlyHistory')
                  .filterBounds(ee.Geometry.Point([36.43, -0.15]));

// ==============================================
// PART 2: SAR WATER DETECTION (Sentinel-1)
// ==============================================
var sarCollection = ee.ImageCollection('COPERNICUS/S1_GRD')
                   .filterBounds(ee.Geometry.Point([36.43, -0.15]))
                   .filter(ee.Filter.eq('instrumentMode', 'IW'))
                   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                   .map(function(image) {
                      return image.select(['VV']).copyProperties(image, ['system:time_start']);
                   });

// SAR Water Detection Function
function calculateSARWater(image) {
  var filtered = image.focal_mean(50, 'circle', 'meters'); // Reduce noise
  var water = filtered.lt(-16); // Water threshold
  return water.rename('SAR_Water').set('system:time_start', image.get('system:time_start'));
}

// Process SAR dataset
var sarWater = sarCollection.map(calculateSARWater);

// ==============================================
// PART 3: HABITAT CLASSIFICATION
// ==============================================
var roi = ee.Geometry.Rectangle([36.35, -0.25, 36.50, -0.05]);

var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
          .filterBounds(roi)
          .filterDate('2021-01-01', '2021-12-31') // Excluding 2022 & 2023
          .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
          .map(function(image) { 
            return image.select(['B2', 'B3', 'B4', 'B8', 'B11', 'B12']); 
          })
          .median();

// AWEI Calculation Function
function calculateAWEI(image) {
  var aweiSh = image.expression(
    'B3 + 2.5 * B8 - 1.5 * (B11 + B12) - 0.25 * B2',
    {
      'B2': image.select('B2'),
      'B3': image.select('B3'),
      'B8': image.select('B8'),
      'B11': image.select('B11'),
      'B12': image.select('B12')
    }
  ).rename('AWEIsh');

  return image.addBands(aweiSh);
}

// Apply AWEI to Sentinel-2 dataset
var s2WithAWEI = calculateAWEI(s2);

// Extract Water from AWEI (values > 0 indicate water)
var aweiWater = s2WithAWEI.select('AWEIsh').gt(0).rename('AWEI_Water');

// ==============================================
// PART 4: FUSION WATER MAP (Combining JRC, SAR, AWEI)
// ==============================================
function fusionWaterMap(year) {
  var jrcImg = jrcDataset.filter(ee.Filter.calendarRange(year, year, 'year')).first();
  var sarImg = sarWater.filter(ee.Filter.calendarRange(year, year, 'year')).mean();
  
  // Fusion: Water detected by either JRC, SAR, or AWEI
  var fusion = ee.Image(0)
    .where(jrcImg.eq(3), 1)  // JRC detects water
    .where(sarImg.eq(1), 1)  // SAR detects water
    .where(aweiWater.eq(1), 1) // AWEI detects water
    .rename('Fusion_Water');

  return fusion;
}

// ==============================================
// VISUALIZATION SETTINGS
// ==============================================
var waterPalette = {min: 0, max: 1, palette: ['black', 'blue']};

// ==============================================
// UI COMPONENTS
// ==============================================
var timeSlider = ui.DateSlider({
  start: 2014 + '-01-01',
  end: 2021 + '-12-31', // Adjusted to exclude 2022 & 2023
  value: 2014 + '-01-01',
  period: 365,
  onChange: function(dateRange) {
    var year = ee.Date(dateRange.start()).get('year').getInfo();
    updateMap(year);
  },
  style: {width: '300px'}
});

// Function to update map layers
function updateMap(year) {
  Map.layers().reset();
  
  var jrcImg = jrcDataset.filter(ee.Filter.calendarRange(year, year, 'year')).first();
  if (jrcImg) Map.addLayer(jrcImg.clip(roi), waterPalette, 'JRC Water ' + year);

  var sarImg = sarWater.filter(ee.Filter.calendarRange(year, year, 'year')).mean();
  if (sarImg) Map.addLayer(sarImg.clip(roi), waterPalette, 'SAR Water ' + year, false);

  Map.addLayer(aweiWater.clip(roi), waterPalette, 'AWEI Water', false);
  
  var fusion = fusionWaterMap(year);
  Map.addLayer(fusion.clip(roi), {min: 0, max: 1, palette: ['black', 'cyan']}, 'Fusion Water', true);
}

// AutoPlay Function
var currentYear = 2014;
function autoplay() {
  timeSlider.setValue(ee.Date.fromYMD(currentYear, 1, 1));
  currentYear++;
  if (currentYear > 2021) currentYear = 2014;
}
ui.util.setInterval(autoplay, 10000);

// ==============================================
// LEGEND (Water + Habitat Classification)
// ==============================================
var legend = ui.Panel({ style: {position: 'bottom-right', padding: '8px'} });
legend.add(ui.Label('Water & Habitat Classification', {fontWeight: 'bold'}));

var legendItems = [
  {color: 'black', label: 'No Water'},
  {color: 'blue', label: 'Detected Water'},
  {color: 'cyan', label: 'Fusion Water'}
];

legendItems.forEach(function(item) {
  var colorBox = ui.Label({style: {backgroundColor: item.color, padding: '8px', width: '20px', height: '20px'}});
  var description = ui.Label({value: item.label, style: {padding: '8px'}});
  legend.add(ui.Panel({widgets: [colorBox, description], layout: ui.Panel.Layout.Flow('horizontal')}));
});

Map.add(legend);

// ==============================================
// USER INTERFACE
// ==============================================
var titleLabel = ui.Label({
  value: "Lake Ol' Bolossat Water & Habitat Monitoring",
  style: {fontWeight: 'bold', fontSize: '18px', color: '#1d3c34'}
});

var zoomButton = ui.Button({
  label: 'Zoom to ROI',
  onClick: function() {
    Map.centerObject(roi, 12);
  }
});

var panel = ui.Panel({
  widgets: [titleLabel, ui.Label('Select year and toggle layers:'), timeSlider, zoomButton],
  style: {position: 'bottom-left', padding: '8px'}
});

Map.add(panel);
updateMap(2014);
